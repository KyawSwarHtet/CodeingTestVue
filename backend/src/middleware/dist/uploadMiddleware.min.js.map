{"version":3,"sources":["uploadMiddleware.ts"],"names":["multer_1","require","aws_sdk_1","multer_sharp_s3_1","path_1","dotenv_1","config","_a","process","env","S3_ENDPOINT","BUCKET_NAME","spacesEndpoint","Endpoint","s3","S3","endpoint","storageposts","dirname","Bucket","ACL","resize","width","height","max","limits","fileSize","metadata","req","file","cb","fieldname","Key","Date","toISOString","replace","originalname","filefilter","filetypes","extname","test","toLocaleLowerCase","mimetype","uploadImgs","storage","fileFilter","array","exports","UploadData"],"mappings":"AAAA,mCAEA,IAAAA,SAAAC,QAAA,UACAC,UAAAD,QAAA,WAEAE,kBAAAF,QAAA,mBACAG,OAAAH,QAAA,QACAI,SAAAJ,QAAA,UACAI,SAAAC,SAEM,IAAAC,GAAAC,QAAAC,IAAEC,YAAAH,GAAAG,YAAaC,YAAAJ,GAAAI,YAgCfC,eAAiB,IAAIV,UAAA,QAAIW,SAASH,aAGlCI,GAAK,IAAIZ,UAAA,QAAIa,GAAG,CACpBC,SAAUJ,iBAINK,aAAed,kBAAA,QAAS,CAC5BW,GAAEA,GACFI,QAAS,IACTC,OAAWR,YAAW,YACtBS,IAAK,cACLC,OAAQ,CACNC,MAAO,IACPC,OAAQ,KAEVC,KAAK,EACLC,OAAQ,CAAEC,SAAU,SAEpBC,SAAU,SAACC,EAAaC,EAAgBC,GACtCA,EAAG,KAAM,CACPC,UAAWF,EAAKE,aAIpBC,IAAK,SAACJ,EAAaC,EAAgBC,GACjCA,EACE,MACA,IAAIG,MAAOC,cAAcC,QAAQ,KAAM,KAAO,IAAMN,EAAKO,iBAMzDC,WAAa,SAACT,EAAcC,EAAgBC,GAI9C,IAAMQ,EAAY,mBAEZC,EAAUD,EAAUE,KAAKpC,OAAA,QAAKmC,QAAQV,EAAKO,cAAcK,qBAI/D,GAFiBH,EAAUE,KAAKX,EAAKa,WAErBH,EACZ,OAAOT,EAAG,MAAK,GAIlB,OAAOA,EAFQ,mBAEC,IAIfa,WAAa3C,SAAA,QAAO,CACtB4C,QAAS3B,aACX4B,WAAYR,aACXS,MAAM,SAEIC,QAAAC,WAAa,CAACL,WAAUA,WAAE7B,GAAEA","file":"uploadMiddleware.min.js","sourcesContent":["\"use strict\";\r\n\r\nimport multer from 'multer'\r\nimport AWS from 'aws-sdk';\r\nimport { Request, Response } from 'express';\r\nimport multerS3 from \"multer-sharp-s3\";\r\nimport path from 'path'\r\nimport {config} from 'dotenv';\r\nconfig();\r\n\r\nconst { S3_ENDPOINT, BUCKET_NAME } = process.env;\r\n\r\n\r\ntype FileData = {\r\n    originalname: string,\r\n    fieldname: string,\r\n    mimetype : string\r\n}\r\n\r\n//declare data type for multer-  S3 Strorage data\r\ninterface S3dataType {\r\n    s3: AWS.S3,\r\n    dirname: string,\r\n    Bucket : string,\r\n    ACL : string,\r\n    resize? : Resize,\r\n    max : Boolean,\r\n    limits : Limit,\r\n    metadata : any,\r\n    Key : any,\r\n}\r\n\r\ntype Resize = {\r\n    width: number,\r\n    height: number,\r\n   \r\n}\r\ntype Limit = {\r\n    fileSize: number\r\n   \r\n}\r\n\r\nconst spacesEndpoint = new AWS.Endpoint(S3_ENDPOINT as any);\r\n\r\n\r\nconst s3 = new AWS.S3({\r\n  endpoint: spacesEndpoint,\r\n});\r\n\r\n\r\nconst storageposts = multerS3({\r\n  s3,\r\n  dirname: \"/\",\r\n  Bucket: `${BUCKET_NAME}/codetest`,\r\n  ACL: \"public-read\",\r\n  resize: {\r\n    width: 850,\r\n    height: 700,\r\n  },\r\n  max: true,\r\n  limits: { fileSize: 1024 * 1024 * 5 }, //  allowed only 5 MB files\r\n  // limits: Imagelimit(file), //  allowed only 5 MB files\r\n  metadata: (req:Request, file: FileData, cb:any) => {\r\n    cb(null, {\r\n      fieldname: file.fieldname,\r\n    });\r\n  },\r\n\r\n  Key: (req:Request, file: FileData, cb:any) => {\r\n    cb(\r\n      null,\r\n      new Date().toISOString().replace(/:/g, \"-\") + \"-\" + file.originalname\r\n    );\r\n  },\r\n} as S3dataType);\r\n\r\n// Check File Type\r\nconst filefilter = (req: Request, file: FileData, cb: any) => {\r\n  \r\n\r\n //Allow ext\r\n    const filetypes = /jpeg|jpg|png|gif/;\r\n    //Check ext\r\n    const extname = filetypes.test(path.extname(file.originalname).toLocaleLowerCase())\r\n    //Check mime type\r\n    const mimetype = filetypes.test(file.mimetype);\r\n\r\n    if (mimetype && extname) {\r\n        return cb(null,true)\r\n    } else {\r\n      const error = \"Wrong file Type\";\r\n    //  error.name = \"LIMIT_FILE_TYPES\";\r\n     return cb(error,false)\r\n    }\r\n};\r\n\r\nconst uploadImgs = multer({\r\n    storage: storageposts,\r\n  fileFilter: filefilter,\r\n}).array(\"files\");\r\n\r\nexport const UploadData = {uploadImgs, s3}\r\n\r\n\r\n\r\n"]}